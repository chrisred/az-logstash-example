input {
  http {
    port => "${INPUT_PORT}"
    additional_codecs => {}
    codec => json {
      target => "[input]"
    }
    user => "${INPUT_USER}"
    password => "${INPUT_PASS}"
  }
}

filter {
  mutate {
    add_field => { "[@metadata][source]" => "logicmonitor" }
    add_field => { "[@metadata][event_class]" => "logicmonitor" }
    add_field => { "[@metadata][basic_auth_user]" => "${OUTPUT_USER}" }
    add_field => { "[@metadata][basic_auth_pass]" => "${OUTPUT_PASS}" }
    add_field => { "[@metadata][output_url]" => "${OUTPUT_URL}" }
  }

  if [input][snow_event_class] {
    mutate {
      replace => { "[@metadata][event_class]" => "%{[input][snow_event_class]}" }
    }
  }

  if [input][date] {
    date {
      match => [ "[input][date]", "yyyy-MM-dd HH:mm:ss ZZZ" ]
    }
  }
  else if [input][end] {
    date {
      match => [ "[input][end]", "yyyy-MM-dd HH:mm:ss ZZZ" ]
    }
  }
  else if [input][start] {
    date {
      match => [ "[input][start]", "yyyy-MM-dd HH:mm:ss ZZZ" ]
      target => "[@metadata][start]"
    }

    if [@metadata][start] {
      grok {
        match => {
          "[input][duration]" =>
          "^(?<[@metadata][duration_h]>\d+)h (?<[@metadata][duration_m]>\d+)m"
        }
      }

      ruby {
        code => '
          duration_mins = (event.get("[@metadata][duration_h]").to_i * 60) + event.get("[@metadata][duration_m]").to_i
          total_epoch = event.get("[@metadata][start]").time.to_i + (duration_mins * 60)
          event.set("[@timestamp]", LogStash::Timestamp.new(Time.at(total_epoch)))
        '
      }
    }
  }

  if [input][website] {
    mutate {
      add_field => { "[@metadata][resource]" => "%{[input][website]}" }
    }
  }
  else {
    mutate {
      add_field => { "[@metadata][resource]" => "%{[input][datasource]}" }
    }
  }

  if [input][dsname] {
    mutate {
      add_field => { "[@metadata][module_name]" => "%{[input][dsname]}" }
    }
  }
  else {
    mutate {
      add_field => { "[@metadata][module_name]" => "%{[@metadata][resource]}" }
    }
  }

  grok {
    match => {
      "[input][webcheckurl]" =>
      "%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:[@metadata][webcheck_host]})"
    }
  }

  if [@metadata][webcheck_host] {
    mutate {
      add_field => { "[@metadata][node]" => "%{[@metadata][webcheck_host]}" }
    }
  }
  else {
    mutate {
      add_field => { "[@metadata][node]" => "%{[input][host]}" }
    }
  }

  if [input][datapoint] {
    mutate {
      add_field => { "[@metadata][metric_name]" => "%{[@metadata][module_name]}-%{[input][datapoint]}" }
    }
  }
  else {
    mutate {
      add_field => { "[@metadata][metric_name]" => "" }
    }
  }

  if [input][level] == "critical" {
    mutate {
      add_field => { "[@metadata][severity]" => "1" }
    }
  }
  else if [input][level] == "error" {
    mutate {
      add_field => { "[@metadata][severity]" => "2" }
    }
  }
  else if [input][level] == "warn" {
    mutate {
      add_field => { "[@metadata][severity]" => "3" }
    }
  }
  else {
    mutate {
      add_field => { "[@metadata][severity]" => "3" }
    }
  }

  if [input][alertstatus] == "clear" {
    mutate {
      replace => { "[@metadata][severity]" => "0" }
    }
  }
  else if [input][alertstatus] == "ack" {
    mutate {
      replace => { "[@metadata][severity]" => "5" }
    }
  }

  json_encode {
    source => "[input]"
    target => "[@metadata][additional_info]"
  }

  ruby {
    code => '
      event.set("records", [{
        "source" => event.get("[@metadata][source]"),
        "event_class" => event.get("[@metadata][event_class]"),
        "node" => event.get("[@metadata][node]"),
        "resource" => event.get("[@metadata][resource]"),
        "metric_name" => event.get("[@metadata][metric_name]"),
        "type" => event.get("[input][alerttype]"),
        "message_key" => event.get("[input][alertid]"),
        "severity" => event.get("[@metadata][severity]"),
        "description" => event.get("[input][message]"),
        "additional_info" => event.get("[@metadata][additional_info]"),
        "time_of_event" => event.get("[@timestamp]")
      }])
    '
  }

  prune {
    whitelist_names => ["records"]
  }

  ruby {
    init => 'require "base64"'
    code => '
      username = event.get("[@metadata][basic_auth_user]")
      password = event.get("[@metadata][basic_auth_pass]")
      base64_string = Base64.strict_encode64("#{username}:#{password}")
      event.set("[@metadata][basic_auth_header]", "Basic #{base64_string}")
    '
  }
}

output {
  http {
    codec => "json"
    http_method => "post"
    headers => {
      "Content-Type" => "application/json"
      "Authorization" => "%{[@metadata][basic_auth_header]}"
    }
    url => "%{[@metadata][output_url]}"
  }
}
